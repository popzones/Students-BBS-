<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:conf/jdbc.properties"/>
<!--声明druid数据库连接池数据源-->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.user}"/>
    <property name="password" value="${jdbc.password}"/>
    <property name="maxActive" value="20"/>
 </bean>
<!--创建SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:conf/Mybatis.xml"/>
    </bean>
<!--    创建dao层对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.saybiu.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
<!--    声明组建扫描器-->
    <context:component-scan base-package="com.saybiu.service"/>

    <!--    声明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--    声明业务方法它的事务属性（隔离级别，传播行为，超时时间）
        id：自定义名称：表示<tx:advice>和</tx:advice>之间的配置内容的
        transaction—manager：事务管理器对象的id

        name:方法名
        propagation:传播行为，枚举值
        isolation：隔离级别
        rollback-for:抛出异常的全限定名称，发生异常一定回滚


        <tx:attributes>
            <tx:method name=""/>
        </tx:attributes>

-->
<!--    声明事务管理器，推荐使用RC隔离级别-->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="userSupportAndUserBeSupported" isolation="READ_COMMITTED" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!--配置切入点表达式-->
    <aop:config>
        <aop:pointcut id="ServicePointCut" expression="execution(* *..service..*.*(..))"/>
        <aop:advisor advice-ref="myAdvice" pointcut-ref="ServicePointCut"/>
    </aop:config>

</beans>


<!--        切入点表达式-->
<!--        execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)throws-pattern?)-->

<!--        modifiers-pattern访问权限类型-->
<!--        ret-type-pattern返回值类型(必须)-->
<!--        declaring-type-pattern包名类名-->
<!--        name-pattern(param-pattern)方法名（参数类型和参数个数）(必须)-->
<!--        throws-pattern抛出异常类型-->

<!--        execution(访问权限 方法返回值 方法声明（参数） 异常类型）-->
<!--        * 表示多个任意字符-->
<!--        ..用来方法参数中，表示任意多个参数，用在包名后，表示当前包及其自包路径-->
<!--        +用在类名后，表示当前类及其子类，用在接口后，表示当前接口及其实现类-->
<!--        execution(public * *(..))-->
<!--        指定切入点为：任意公共方法-->
<!--        execution(* com.saybiu.*.*(..))-->
<!--        指定切入点为：com.saybiu包中的所有类下的所有任意参数类型的函数名-->
<!--        execution(* set*(..))-->
<!--        指定切入点为 任何开头为set的方法-->
<!--        execution(* com.saybiu..*.*(..)-->
<!--        指定切入点为：定义为saybiu包或者子包内的所有类的所有方法。".."出现在类名中时，后面必须跟"*"，表示包、子包下的所有类-->
<!--        execution(* *..service.*.*(..)-->
<!--        指定切入点为：指定所有包下的service子包下所有类(接口)中所有方法为切入点-->
<!--        execution(* *.service.*.*(..))-->
<!--        指定切入点为：指定只有一级包下的service子包下所有类(接口)中所有方法为切入点-->